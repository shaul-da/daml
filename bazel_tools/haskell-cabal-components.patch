diff --git a/haskell/cabal.bzl b/haskell/cabal.bzl
index 210da471..747705e6 100644
--- a/haskell/cabal.bzl
+++ b/haskell/cabal.bzl
@@ -88,7 +88,7 @@ def _cabal_tool_flag(tool):
 def _make_path(hs, binaries):
     return ":".join([binary.dirname for binary in binaries.to_list()] + ["$PATH"])
 
-def _prepare_cabal_inputs(hs, cc, dep_info, cc_info, package_id, tool_inputs, tool_input_manifests, cabal, setup, srcs, flags, cabal_wrapper_tpl, package_database):
+def _prepare_cabal_inputs(hs, cc, dep_info, cc_info, component, package_id, tool_inputs, tool_input_manifests, cabal, setup, srcs, flags, cabal_wrapper_tpl, package_database):
     """Compute Cabal wrapper, arguments, inputs."""
     with_profiling = is_profiling_enabled(hs)
 
@@ -133,7 +133,7 @@ def _prepare_cabal_inputs(hs, cc, dep_info, cc_info, package_id, tool_inputs, to
         # collect2.
         if not file.basename.startswith("libHS")
     ]
-    args.add_all([package_id, setup, cabal.dirname, package_database.dirname])
+    args.add_all([component, package_id, setup, cabal.dirname, package_database.dirname])
     args.add("--flags=" + " ".join(flags))
     args.add("--")
     args.add_all(package_databases, map_each = _dirname, format_each = "--package-db=%s")
@@ -220,6 +220,9 @@ def _haskell_cabal_library_impl(ctx):
         cc,
         dep_info,
         cc_info,
+        component = "lib:{}".format(
+            ctx.attr.package_name if ctx.attr.package_name else hs.label.name,
+        ),
         package_id = package_id,
         tool_inputs = tool_inputs,
         tool_input_manifests = tool_input_manifests,
@@ -394,6 +397,7 @@ def _haskell_cabal_binary_impl(ctx):
         cc,
         dep_info,
         cc_info,
+        component = "exe:{}".format(hs.label.name),
         package_id = hs.label.name,
         tool_inputs = tool_inputs,
         tool_input_manifests = tool_input_manifests,
diff --git a/haskell/private/cabal_wrapper.sh.tpl b/haskell/private/cabal_wrapper.sh.tpl
index 53abd667..1250b25b 100644
--- a/haskell/private/cabal_wrapper.sh.tpl
+++ b/haskell/private/cabal_wrapper.sh.tpl
@@ -1,11 +1,12 @@
 #!/usr/bin/env bash
 #
-# cabal_wrapper.sh <PKG_NAME> <SETUP_PATH> <PKG_DIR> <PACKAGE_DB_PATH> [EXTRA_ARGS...] -- [PATH_ARGS...]
+# cabal_wrapper.sh <COMPONENT> <PKG_NAME> <SETUP_PATH> <PKG_DIR> <PACKAGE_DB_PATH> [EXTRA_ARGS...] -- [PATH_ARGS...]
 #
 # This wrapper calls Cabal's configure/build/install steps one big
 # action so that we don't have to track all inputs explicitly between
 # steps.
 #
+# COMPONENT: Cabal component to build.
 # PKG_NAME: Package ID of the resulting package.
 # SETUP_PATH: Path to Setup.hs
 # PKG_DIR: Directory containing the Cabal file
@@ -67,12 +68,13 @@ LD_LIBRARY_PATH=$(canonicalize_path $LD_LIBRARY_PATH)
 LIBRARY_PATH=$(canonicalize_path $LIBRARY_PATH)
 PATH=$(canonicalize_path $PATH)
 
-name=$1
+component=$1
+name=$2
 execroot="$(pwd)"
-setup=$execroot/$2
-srcdir=$execroot/$3
-pkgroot="$(realpath $execroot/$(dirname $4))" # By definition (see ghc-pkg source code).
-shift 4
+setup=$execroot/$3
+srcdir=$execroot/$4
+pkgroot="$(realpath $execroot/$(dirname $5))" # By definition (see ghc-pkg source code).
+shift 5
 
 declare -a extra_args
 while [[ $1 != -- ]]; do
@@ -108,7 +110,10 @@ fi
 # absolute ones before doing so (using $execroot).
 cd $srcdir
 export HOME=/var/empty
+# Note, setting --datasubdir is required to work around
+#   https://github.com/haskell/cabal/issues/6235
 $execroot/%{runghc} $setup configure \
+    $component \
     --verbose=0 \
     --user \
     --with-compiler=$execroot/%{ghc} \
@@ -124,6 +129,7 @@ $execroot/%{runghc} $setup configure \
     --libsubdir= \
     --bindir=$bindir \
     --datadir=$datadir \
+    --datasubdir= \
     --package-db=clear \
     --package-db=global \
     "${extra_args[@]}" \
